
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ vars.MY_AWS_REGION }}
  ECR_REPOSITORY_FRONT: ${{ vars.MY_ECR_REPOSITORY_FRONT }}
  ECR_REPOSITORY_BACKEND: ${{ vars.MY_ECR_REPOSITORY_BACKEND }}
  ECS_SERVICE_FRONT: ${{ vars.MY_ECS_SERVICE_FRONT }}
  ECS_SERVICE_BACKEND: ${{ vars.MY_ECS_SERVICE_BAKCEND }}
  ECS_CLUSTER: ${{ vars.MY_ECS_CLUSTER }}
  ECS_TASK_DEFINITION_FRONT: ${{ vars.MY_ECS_TASK_DEFINITION_FRONT }}
  ECS_TASK_DEFINITION_BACKEND: ${{ vars.MY_ECS_TASK_DEFINITION_BACKEND }}
  CONTAINER_NAME_FRONT: ${{ vars.MY_CONTAINER_NAME_FRONT }}
  CONTAINER_NAME_BACKEND: ${{ vars.MY_CONTAINER_NAME_BACKEND }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push　　frontend image to Amazon ECR
      id: build-image-front
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: MY_ECR_REPOSITORY_FRONT
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: MY_ECR_REPOSITORY_BACKEND 
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new frontend image ID in the Amazon ECS task definition
      id: task-def-front
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_FRONT }}
        container-name: ${{ env.CONTAINER_NAME_FRONT }}
        image: ${{ steps.build-image-front.outputs.image }}
    
    - name: Fill in the new backend image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.build-image-backend.outputs.image }}

    - name: Deploy Amazon ECS frontend task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-front.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONT }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Deploy Amazon ECS backend task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
